import { describe, test, expect, beforeEach } from 'vitest';
import { GoogleAdsScriptGenerator } from '../../src/writers/ads-script.js';
import { UrlHealthChecker, UrlHealthResult } from '../../src/validators/url-health.js';

/**
 * Google Ads Script Integration Tests
 * 
 * Tests the complete Google Ads Script generation workflow including:
 * - Script syntax validation
 * - Safety constraint verification
 * - URL health integration
 * - Campaign structure validation
 */

describe('Google Ads Script Integration', () => {
  let scriptGenerator: GoogleAdsScriptGenerator;
  
  beforeEach(() => {
    scriptGenerator = new GoogleAdsScriptGenerator();
  });

  const getDefaultScriptOptions = (productName = 'test', markets = ['AU']) => ({
    outputPath: 'test-output',
    productName,
    date: '2025-09-03',
    markets,
    dryRun: true,
    allowHighBudget: false,
    skipHealthCheck: false
  });

  test('Generates syntactically valid JavaScript', async () => {
    const mockData = {
      clusters: [
        {
          name: 'WebP PNG Conversion',
          primaryKeywords: [
            { keyword: 'webp to png chrome extension', recommended_match_type: 'exact' }
          ],
          keywords: [
            { keyword: 'webp png converter', recommended_match_type: 'phrase' }
          ],
          landingPage: 'https://example.com/convertmyfile/webp-to-png'
        }
      ],
      productConfig: {
        name: 'convertmyfile',
        shared_negatives: ['tutorial', 'course', 'jobs']
      },
      markets: ['AU', 'US'],
      urlHealthResults: [
        {
          url: 'https://example.com/convertmyfile/webp-to-png',
          status: 'pass',
          checks: {},
          metadata: {},
          errors: [],
          warnings: []
        } as UrlHealthResult
      ],
      campaignOptions: {
        dailyBudgetAud: 5.00,
        deviceTargeting: { desktop: 1.0, mobile: -1.0, tablet: -0.3 },
        startPaused: true,
        labelPrefix: 'LBA_v11'
      }
    };

    const script = await scriptGenerator.generateAdsScript(
      mockData.clusters,
      mockData.productConfig,
      mockData.urlHealthResults,
      getDefaultScriptOptions('convertmyfile', ['AU', 'US'])
    );
    
    // Basic script structure validation
    expect(script).toContain('function main()');
    expect(script).toContain('// Generated by LBA SEO & Ads Expert Tool v1.1');
    expect(script).toContain('SAFETY CHECKLIST');
    
    // Check safety constants are hard-coded
    expect(script).toContain('MAX_DAILY_BUDGET_AUD: 5');
    expect(script).toContain("DEFAULT_CAMPAIGN_STATUS: 'PAUSED'");
    
    // Validate script has no syntax errors by testing function structure
    expect(script).toMatch(/function main\(\)\s*\{[\s\S]*\}/);
    expect(script).toMatch(/function createCampaigns\(\)\s*\{[\s\S]*\}/);
  });

  test('Enforces safety constraints', async () => {
    const mockData = {
      clusters: [],
      productConfig: { name: 'test', shared_negatives: [] },
      markets: ['AU'],
      urlHealthResults: [],
      campaignOptions: {
        dailyBudgetAud: 15.00, // Above safety limit
        deviceTargeting: { desktop: 1.0, mobile: 1.0, tablet: 1.0 }, // All devices
        startPaused: false, // Try to start active
        labelPrefix: 'TEST'
      }
    };

    const script = await scriptGenerator.generateAdsScript(
      mockData.clusters,
      mockData.productConfig,
      mockData.urlHealthResults,
      getDefaultScriptOptions()
    );
    
    // Should enforce safety limits regardless of input
    expect(script).toContain('MAX_DAILY_BUDGET_AUD: 5'); // Hard-coded limit
    expect(script).toContain("DEFAULT_CAMPAIGN_STATUS: 'PAUSED'"); // Always paused
    expect(script).toContain('desktop: 1.0, mobile: -1.0, tablet: -0.3'); // Desktop-only targeting
    
    // Should contain budget safety check
    expect(script).toContain('ALLOW_HIGH_BUDGET');
    expect(script).toContain('Budget safety check');
  });

  test('Integrates URL health check results', async () => {
    const mockHealthResults: UrlHealthResult[] = [
      {
        url: 'https://example.com/page1',
        status: 'pass',
        checks: {
          httpStatus: { status: 'pass', message: 'OK' },
          htmlStructure: { status: 'pass', message: '' },
          contentQuality: { status: 'pass', message: '' },
          robotsTxt: { status: 'pass', message: '' },
          redirectChain: { status: 'pass', message: '' },
          canonical: { status: 'pass', message: '' },
          performance: { status: 'pass', message: '' },
          hreflang: { status: 'pass', message: '' }
        },
        metadata: {
          httpCode: 200,
          title: 'Test Page',
          h1: 'Test Content',
          canonical: 'https://example.com/page1',
          robotsMeta: 'index, follow',
          wordCount: 250,
          ttfbMs: 800,
          redirectChain: [],
          hreflangLinks: []
        },
        errors: [],
        warnings: []
      },
      {
        url: 'https://example.com/page2',
        status: 'fail',
        checks: {
          httpStatus: { status: 'fail', message: '404 Not Found' },
          htmlStructure: { status: 'fail', message: '' },
          contentQuality: { status: 'fail', message: '' },
          robotsTxt: { status: 'pass', message: '' },
          redirectChain: { status: 'pass', message: '' },
          canonical: { status: 'pass', message: '' },
          performance: { status: 'pass', message: '' },
          hreflang: { status: 'pass', message: '' }
        },
        metadata: {
          httpCode: 404,
          title: '',
          h1: '',
          canonical: '',
          robotsMeta: '',
          wordCount: 0,
          ttfbMs: 0,
          redirectChain: [],
          hreflangLinks: []
        },
        errors: ['HTTP 404: Page not found'],
        warnings: []
      }
    ];

    const mockData = {
      clusters: [
        {
          name: 'Test Cluster',
          primaryKeywords: [{ keyword: 'test', recommended_match_type: 'exact' }],
          keywords: [],
          landingPage: 'https://example.com/page1'
        }
      ],
      productConfig: { name: 'test', shared_negatives: [] },
      markets: ['AU'],
      urlHealthResults: mockHealthResults,
      campaignOptions: {
        dailyBudgetAud: 5.00,
        deviceTargeting: { desktop: 1.0, mobile: -1.0, tablet: -0.3 },
        startPaused: true,
        labelPrefix: 'TEST'
      }
    };

    const script = await scriptGenerator.generateAdsScript(
      mockData.clusters,
      mockData.productConfig,
      mockData.urlHealthResults,
      getDefaultScriptOptions()
    );
    
    // Should contain URL health validation
    expect(script).toContain('URL Health Check Results');
    expect(script).toContain('https://example.com/page1: PASS');
    expect(script).toContain('https://example.com/page2: FAIL');
    expect(script).toContain('HTTP 404: Page not found');
    
    // Should contain health check warnings
    expect(script).toMatch(/Failed URLs detected.*Do not proceed/s);
  });

  test('Handles empty clusters gracefully', async () => {
    const mockData = {
      clusters: [],
      productConfig: { name: 'empty', shared_negatives: [] },
      markets: ['AU'],
      urlHealthResults: [],
      campaignOptions: {
        dailyBudgetAud: 5.00,
        deviceTargeting: { desktop: 1.0, mobile: -1.0, tablet: -0.3 },
        startPaused: true,
        labelPrefix: 'EMPTY'
      }
    };

    const script = await scriptGenerator.generateAdsScript(
      mockData.clusters,
      mockData.productConfig,
      mockData.urlHealthResults,
      getDefaultScriptOptions('empty')
    );
    
    // Should generate valid script with no-op behavior
    expect(script).toContain('function main()');
    expect(script).toContain('No clusters provided');
    expect(script).toContain('Logger.log("No campaigns to create");');
  });

  test('Validates campaign naming conventions', async () => {
    const mockData = {
      clusters: [
        {
          name: 'WebP PNG Conversion',
          primaryKeywords: [{ keyword: 'webp to png', recommended_match_type: 'exact' }],
          keywords: [],
          landingPage: 'https://example.com/webp'
        },
        {
          name: 'PDF to JPG Tools',
          primaryKeywords: [{ keyword: 'pdf to jpg', recommended_match_type: 'exact' }],
          keywords: [],
          landingPage: 'https://example.com/pdf'
        }
      ],
      productConfig: { name: 'convertmyfile', shared_negatives: [] },
      markets: ['AU', 'US'],
      urlHealthResults: [],
      campaignOptions: {
        dailyBudgetAud: 5.00,
        deviceTargeting: { desktop: 1.0, mobile: -1.0, tablet: -0.3 },
        startPaused: true,
        labelPrefix: 'LBA'
      }
    };

    const script = await scriptGenerator.generateAdsScript(
      mockData.clusters,
      mockData.productConfig,
      mockData.urlHealthResults,
      getDefaultScriptOptions('convertmyfile', ['AU', 'US'])
    );
    
    // Should contain properly named campaigns for each market
    expect(script).toMatch(/LBA_convertmyfile_WebP PNG Conversion_AU/);
    expect(script).toMatch(/LBA_convertmyfile_WebP PNG Conversion_US/);
    expect(script).toMatch(/LBA_convertmyfile_PDF to JPG Tools_AU/);
    expect(script).toMatch(/LBA_convertmyfile_PDF to JPG Tools_US/);
    
    // Should contain ad group creation
    expect(script).toContain('createAdGroup');
    expect(script).toContain('WebP PNG Conversion');
    expect(script).toContain('PDF to JPG Tools');
  });

  test('Includes comprehensive logging and error handling', async () => {
    const mockData = {
      clusters: [
        {
          name: 'Test Cluster',
          primaryKeywords: [{ keyword: 'test keyword', recommended_match_type: 'exact' }],
          keywords: [],
          landingPage: 'https://example.com/test'
        }
      ],
      productConfig: { name: 'test', shared_negatives: ['tutorial'] },
      markets: ['AU'],
      urlHealthResults: [],
      campaignOptions: {
        dailyBudgetAud: 5.00,
        deviceTargeting: { desktop: 1.0, mobile: -1.0, tablet: -0.3 },
        startPaused: true,
        labelPrefix: 'TEST'
      }
    };

    const script = await scriptGenerator.generateAdsScript(
      mockData.clusters,
      mockData.productConfig,
      mockData.urlHealthResults,
      getDefaultScriptOptions()
    );
    
    // Should contain comprehensive logging
    expect(script).toMatch(/Logger\.log.*Starting campaign creation/);
    expect(script).toMatch(/Logger\.log.*Campaign created:/);
    expect(script).toMatch(/Logger\.log.*Ad group created:/);
    expect(script).toMatch(/Logger\.log.*Keywords added:/);
    
    // Should contain error handling
    expect(script).toContain('try {');
    expect(script).toContain('} catch (error) {');
    expect(script).toContain('Logger.log("ERROR:');
    
    // Should contain execution summary
    expect(script).toContain('EXECUTION SUMMARY');
    expect(script).toMatch(/Total campaigns.*Total ad groups.*Total keywords/s);
  });
});