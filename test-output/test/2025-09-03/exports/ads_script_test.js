/**
 * ‚ö†Ô∏è GOOGLE ADS SCRIPT - REVIEW BEFORE RUN ‚ö†Ô∏è
 * 
 * Generated by: LBA SEO & Ads Expert Tool v1.1.0
 * Product: test
 * Date: 2025-09-03
 * Markets: AU
 * 
 * üö® SAFETY CHECKLIST - COMPLETE BEFORE EXECUTION:
 * 
 * ‚úÖ 1. VERIFY all landing pages are live and working
 * ‚úÖ 2. CONFIRM daily budget is acceptable: $0/day
 * ‚úÖ 3. CHECK geo targeting matches your requirements: AU
 * ‚úÖ 4. VALIDATE desktop-only targeting is intended (mobile -100%)
 * ‚úÖ 5. REVIEW all campaigns will be created as PAUSED (safe default)
 * ‚úÖ 6. ENSURE you have budget approval for estimated spend
 * ‚úÖ 7. BACKUP existing campaigns before running script
 * ‚úÖ 8. TEST in preview mode first (set DRY_RUN = true)
 * 
 * üîß SCRIPT CONFIGURATION:
 * - Total Ad Groups: 0
 * - Total Keywords: 0
 * - Campaign Status: PAUSED (requires manual activation)
 * - Device Targeting: Desktop only (mobile -100% bid modifier)
 * - Labels: All entities tagged with LBA_SEO_ADS_EXPERT_2025-09-03
 * 
 * üõë TO RUN THIS SCRIPT:
 * 1. Set DRY_RUN = false (line ~50)
 * 2. Optionally set ALLOW_HIGH_BUDGET = true if budget > $10
 * 3. Save and run in Google Ads Scripts interface
 * 
 * üìä EXPECTED CHANGES:
 * - CREATE: 1 campaign (undefined - AU - 2025-09-03)
 * - CREATE: 0 ad groups
 * - CREATE: 0 keywords
 * - CREATE: 0 responsive search ads
 * - APPLY: Shared negative list with 8 negatives
 * 
 * Generated: 2025-09-08T06:30:39.636Z
 */


// ============================================================================
// SAFETY CONSTANTS - DO NOT MODIFY
// ============================================================================

const SAFETY_CONFIG = {
  MAX_DAILY_BUDGET_AUD: 10,
  DEFAULT_CAMPAIGN_STATUS: 'PAUSED',
  DEVICE_BID_MODIFIERS: {
    DESKTOP: 1,
    MOBILE: -1,
    TABLET: -0.3
  },
  GEO_CONSTANTS: {
    AU: 2036, // Australia
    US: 2840, // United States
    GB: 2826  // United Kingdom
  },
  LABEL_PREFIX: 'LBA_SEO_ADS_EXPERT',
  SCRIPT_VERSION: '1.1.0'
};


// ============================================================================
// MAIN EXECUTION FUNCTION
// ============================================================================

function main() {
  // üö® SAFETY SETTINGS - REVIEW BEFORE CHANGING
  const DRY_RUN = true;                    // Set to false to actually create campaigns
  const ALLOW_HIGH_BUDGET = false;  // Set to true to allow budgets > $10
  
  console.log('üöÄ Starting LBA SEO Ads Expert Script v' + SAFETY_CONFIG.SCRIPT_VERSION);
  console.log('üìÖ Generated: ' + DATE_STAMP);
  console.log('üéØ Product: ' + PRODUCT_NAME);
  console.log('üåç Markets: ' + MARKETS.join(', '));
  console.log('üß™ Dry Run Mode: ' + DRY_RUN);
  
  try {
    if (DRY_RUN) {
      console.log('\nüîç DRY RUN MODE - No changes will be made');
      previewCampaignChanges();
    } else {
      console.log('\n‚ö° LIVE MODE - Creating campaigns');
      createCampaignStructure(ALLOW_HIGH_BUDGET);
    }
    
    console.log('\n‚úÖ Script execution completed successfully');
    
  } catch (error) {
    console.error('‚ùå Script execution failed:', error.toString());
    console.error('üîß Check the error above and review script configuration');
  }
}


// ============================================================================
// CAMPAIGN CREATION FUNCTIONS
// ============================================================================

function createCampaignStructure(allowHighBudget) {
  // Budget validation
  const dailyBudget = 0;
  
  if (dailyBudget > SAFETY_CONFIG.MAX_DAILY_BUDGET_AUD && !allowHighBudget) {
    throw new Error('Daily budget $' + dailyBudget + ' exceeds safety limit of $' + SAFETY_CONFIG.MAX_DAILY_BUDGET_AUD + '. Set ALLOW_HIGH_BUDGET=true to override.');
  }
  
  console.log('\nüìä Creating campaign: undefined - AU - 2025-09-03');
  console.log('üí∞ Daily Budget: $' + dailyBudget);
  
  // Create campaign
  const campaignBuilder = AdsApp.campaigns()
    .newCampaignBuilder()
    .withName('undefined - AU - 2025-09-03')
    .withStatus(SAFETY_CONFIG.DEFAULT_CAMPAIGN_STATUS)
    .withBiddingStrategy(AdsApp.biddingStrategies().manualCpc())
    .withDailyBudget(dailyBudget);
  
  // Add geo targeting
  const geoTargets = [];
  geoTargets.push(SAFETY_CONFIG.GEO_CONSTANTS.AU); // AU
  
  campaignBuilder.withGeoTargeting(geoTargets);
  
  // Create the campaign
  const campaignOperation = campaignBuilder.build();
  
  if (campaignOperation.isSuccessful()) {
    const campaign = campaignOperation.getResult();
    console.log('‚úÖ Campaign created successfully: ' + campaign.getName());
    
    // Apply campaign-level label
    const campaignLabel = SAFETY_CONFIG.LABEL_PREFIX + '_' + DATE_STAMP;
    campaign.applyLabel(campaignLabel);
    
    // Set device bid modifiers (desktop-only targeting)
    campaign.bidding().setMobileBidModifier(SAFETY_CONFIG.DEVICE_BID_MODIFIERS.MOBILE);
    campaign.bidding().setTabletBidModifier(SAFETY_CONFIG.DEVICE_BID_MODIFIERS.TABLET);
    
    console.log('üì± Device targeting: Desktop only (mobile ' + (SAFETY_CONFIG.DEVICE_BID_MODIFIERS.MOBILE * 100) + '%)');
    
    // Create ad groups
    createAdGroups(campaign);
    
    // Apply shared negatives
    createSharedNegatives(campaign);
    
  } else {
    throw new Error('Failed to create campaign: ' + campaignOperation.getErrors().join(', '));
  }
}


// ============================================================================
// AD GROUP CREATION FUNCTIONS
// ============================================================================

function createAdGroups(campaign) {
  console.log('\nüéØ Creating 0 ad groups...');
  
  const adGroups = [];
  
  console.log('‚úÖ All ad groups created successfully');
  return adGroups;
}


// ============================================================================
// UTILITY FUNCTIONS
// ============================================================================

function createKeywordsForAdGroup(adGroup, keywordData) {
  console.log('üìù Creating ' + keywordData.length + ' keywords for: ' + adGroup.getName());
  
  keywordData.forEach(function(kw) {
    const keywordText = kw.matchType === 'EXACT' ? '[' + kw.text + ']' : 
                       kw.matchType === 'PHRASE' ? '"' + kw.text + '"' : kw.text;
    
    const keywordBuilder = adGroup.newKeywordBuilder()
      .withText(keywordText)
      .withCpc(kw.maxCpc || 2.50);
      
    const keywordOperation = keywordBuilder.build();
    
    if (keywordOperation.isSuccessful()) {
      const keyword = keywordOperation.getResult();
      keyword.applyLabel(SAFETY_CONFIG.LABEL_PREFIX + '_' + DATE_STAMP);
      console.log('  ‚úÖ Keyword: ' + keywordText);
    } else {
      console.error('  ‚ùå Failed to create keyword: ' + keywordText, keywordOperation.getErrors());
    }
  });
}

function createResponsiveSearchAd(adGroup, adData) {
  console.log('üì¢ Creating RSA for: ' + adGroup.getName());
  
  const adBuilder = adGroup.newAd().responsiveSearchAdBuilder()
    .withFinalUrl(adData.finalUrl);
  
  // Add headlines (including pinned ones)
  adData.headlines.forEach(function(headline, index) {
    adBuilder.withHeadline(headline);
  });
  
  // Add pinned headlines
  adData.pinnedHeadlines.forEach(function(pinned) {
    adBuilder.withHeadlinePinnedToPosition(pinned.text, pinned.position);
  });
  
  // Add descriptions
  adData.descriptions.forEach(function(description) {
    adBuilder.withDescription(description);
  });
  
  const adOperation = adBuilder.build();
  
  if (adOperation.isSuccessful()) {
    const ad = adOperation.getResult();
    ad.applyLabel(SAFETY_CONFIG.LABEL_PREFIX + '_' + DATE_STAMP);
    console.log('  ‚úÖ RSA created with ' + adData.headlines.length + ' headlines');
  } else {
    console.error('  ‚ùå Failed to create RSA:', adOperation.getErrors());
  }
}

function createSharedNegatives(campaign) {
  console.log('\nüö´ Creating shared negative keywords...');
  
  // Create shared negative keyword list
  const sharedSetBuilder = AdsApp.sharedSets()
    .newSharedSetBuilder()
    .withName(PRODUCT_NAME + ' - Common Negatives')
    .withType('NEGATIVE_KEYWORDS');
    
  const sharedSetOperation = sharedSetBuilder.build();
  
  if (sharedSetOperation.isSuccessful()) {
    const sharedSet = sharedSetOperation.getResult();
    console.log('‚úÖ Shared negative list created');
    
    // Add negative keywords
    const negatives = ['android', 'iphone', 'safari', 'mobile', 'tutorial', 'jobs', 'api', 'course'];
    
    negatives.forEach(function(negative) {
      sharedSet.addNegativeKeyword(negative);
    });
    
    // Associate with campaign
    campaign.addSharedSet(sharedSet);
    console.log('‚úÖ Shared negatives applied to campaign');
  } else {
    console.error('‚ùå Failed to create shared negatives:', sharedSetOperation.getErrors());
  }
}


// ============================================================================
// DRY RUN PREVIEW FUNCTION
// ============================================================================

function previewCampaignChanges() {
  console.log('\nüìã PREVIEW OF PLANNED CHANGES (DRY RUN MODE)');
  console.log('============================================\n');
  
  console.log('üè¢ CAMPAIGN TO CREATE:');
  console.log('  Name: undefined - AU - 2025-09-03');
  console.log('  Budget: $0/day');
  console.log('  Status: PAUSED (requires manual activation)');
  console.log('  Markets: AU');
  console.log('  Device Targeting: Desktop only (mobile -100%)\n');
  
  console.log('üéØ AD GROUPS TO CREATE (' + 0 + '):');
  
  
  console.log('\nüìä SUMMARY:');
  console.log('  Total Keywords: 0');
  console.log('  Total Ads: 0');
  console.log('  Estimated Daily Spend: $0');
  console.log('  Safety Label: ' + SAFETY_CONFIG.LABEL_PREFIX + '_' + DATE_STAMP);
  
  console.log('\n‚ö†Ô∏è  TO EXECUTE FOR REAL:');
  console.log('  1. Set DRY_RUN = false');
  console.log('  2. Save and run this script again');
  console.log('  3. Monitor campaign creation in Google Ads interface');
  
  console.log('\nüîí SAFETY REMINDERS:');
  console.log('  - All campaigns will be PAUSED by default');
  console.log('  - Desktop-only targeting (mobile -100%)');
  console.log('  - Budget capped at $0/day');
  console.log('  - All entities labeled for easy identification');
}