/**
 * A/B Test Routing Configuration for exp_lp_palettekit_20250905_xjjo
 * Generated by SEO Ads Expert v1.5
 */

class ABTestRouter {
  constructor(config) {
    this.experimentId = config.experimentId;
    this.variants = config.variants;
    this.cookieName = config.cookieName || 'ab_test_assignment';
    this.cookieExpiry = config.cookieExpiry || 30; // days
  }

  // Get or create user assignment
  getUserAssignment() {
    // Check existing cookie
    const existingAssignment = this.getCookie(this.cookieName);
    if (existingAssignment) {
      try {
        const assignment = JSON.parse(existingAssignment);
        if (assignment.experimentId === this.experimentId && !this.isExpired(assignment.expiresAt)) {
          return assignment;
        }
      } catch (e) {
        // Invalid cookie, create new assignment
      }
    }

    // Create new assignment
    return this.createNewAssignment();
  }

  // Create new random assignment
  createNewAssignment() {
    const random = Math.random();
    let cumulativeWeight = 0;
    
    for (const variant of this.variants) {
      cumulativeWeight += variant.weight;
      if (random <= cumulativeWeight) {
        const assignment = {
          experimentId: this.experimentId,
          variantId: variant.id,
          variantName: variant.name,
          isControl: variant.isControl,
          assignedAt: Date.now(),
          expiresAt: Date.now() + (this.cookieExpiry * 24 * 60 * 60 * 1000)
        };
        
        this.setCookie(this.cookieName, JSON.stringify(assignment), this.cookieExpiry);
        return assignment;
      }
    }
    
    // Fallback to control
    const controlVariant = this.variants.find(v => v.isControl) || this.variants[0];
    const assignment = {
      experimentId: this.experimentId,
      variantId: controlVariant.id,
      variantName: controlVariant.name,
      isControl: true,
      assignedAt: Date.now(),
      expiresAt: Date.now() + (this.cookieExpiry * 24 * 60 * 60 * 1000)
    };
    
    this.setCookie(this.cookieName, JSON.stringify(assignment), this.cookieExpiry);
    return assignment;
  }

  // Route user to appropriate variant
  routeUser() {
    const assignment = this.getUserAssignment();
    const variant = this.variants.find(v => v.id === assignment.variantId);
    
    if (!variant) {
      console.warn(`Variant ${assignment.variantId} not found, using control`);
      const controlVariant = this.variants.find(v => v.isControl) || this.variants[0];
      window.location.href = controlVariant.path;
      return;
    }

    // Track exposure
    this.trackExposure(assignment);

    // Redirect if needed (avoid infinite loops)
    const currentPath = window.location.pathname;
    if (currentPath !== variant.path && !currentPath.includes(variant.path)) {
      window.location.href = variant.path;
    }
  }

  // Track variant exposure
  trackExposure(assignment) {
    // Google Analytics 4
    if (typeof gtag !== 'undefined') {
      gtag('event', 'ab_test_exposure', {
        experiment_id: this.experimentId,
        variant_id: assignment.variantId,
        variant_name: assignment.variantName,
        is_control: assignment.isControl,
        custom_map: {
          custom_dimension_1: assignment.variantId
        }
      });
    }

    // Plausible Analytics
    if (typeof plausible !== 'undefined') {
      plausible('AB Test Exposure', {
        props: {
          experiment: this.experimentId,
          variant: assignment.variantId,
          is_control: assignment.isControl
        }
      });
    }

    // Custom tracking endpoint
    fetch('/api/ab-test/exposure', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        experimentId: this.experimentId,
        variantId: assignment.variantId,
        timestamp: Date.now(),
        userAgent: navigator.userAgent,
        referrer: document.referrer
      })
    }).catch(console.error);
  }

  // Utility methods
  getCookie(name) {
    const value = `; ${document.cookie}`;
    const parts = value.split(`; ${name}=`);
    if (parts.length === 2) return parts.pop().split(';').shift();
  }

  setCookie(name, value, days) {
    const expires = new Date(Date.now() + days * 864e5).toUTCString();
    document.cookie = `${name}=${value}; expires=${expires}; path=/; SameSite=Lax`;
  }

  isExpired(timestamp) {
    return Date.now() > timestamp;
  }
}

// Auto-initialize when DOM is ready
document.addEventListener('DOMContentLoaded', () => {
  const config = {};
  const router = new ABTestRouter(config);
  router.routeUser();
});