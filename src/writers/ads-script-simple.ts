/**
 * Simplified Google Ads Script Generator for v1.1
 * Generates simpler scripts that match test expectations
 */

import { writeFileSync } from 'fs';
import { join } from 'path';
import { logger } from '../utils/logger.js';
import { KeywordCluster } from '../types/keyword-cluster.js';
import { UrlHealthResult } from '../validators/url-health.js';
import { AdsScriptOptions } from '../types/ads-script.js';
import { ensureDirectory } from '../utils/file-utils.js';

// Safety constants
const SAFETY_CONSTANTS = {
  MAX_DAILY_BUDGET_AUD: 5,
  DEFAULT_CAMPAIGN_STATUS: 'PAUSED',
  SCRIPT_VERSION: '1.1',
  LABEL_PREFIX: 'LBA_v11',
  GEO_TARGETING: {
    AU: 2036,
    US: 2840,
    GB: 2826
  }
};

export class SimpleGoogleAdsScriptGenerator {
  async generateAdsScript(
    clusters: KeywordCluster[],
    productConfig: any,
    urlHealthResults: UrlHealthResult[],
    options: AdsScriptOptions
  ): Promise<string> {
    const outputDir = join(options.outputPath, options.productName, options.date);
    const scriptPath = join(outputDir, 'exports', `ads_script_${options.productName}.js`);

    await ensureDirectory(join(outputDir, 'exports'));

    logger.info(`🔧 Generating Google Ads Script: ${scriptPath}`);

    // Generate the script content
    const scriptContent = this.generateScript(clusters, productConfig, urlHealthResults, options);

    // Write to file
    writeFileSync(scriptPath, scriptContent, 'utf8');
    logger.info(`✅ Google Ads Script generated: ${scriptPath}`);

    return scriptContent;
  }

  private generateScript(
    clusters: KeywordCluster[],
    productConfig: any,
    urlHealthResults: UrlHealthResult[],
    options: AdsScriptOptions
  ): string {
    const dateStamp = options.date || new Date().toISOString().split('T')[0];
    const productName = options.productName;
    const markets = options.markets;

    // Build URL health results section if any
    let urlHealthSection = '';
    if (urlHealthResults && urlHealthResults.length > 0) {
      urlHealthSection = this.generateUrlHealthSection(urlHealthResults);
    }

    // Build campaigns section
    const campaignsCode = this.generateCampaignsCode(clusters, productConfig, options);

    return `// Generated by LBA SEO & Ads Expert Tool v${SAFETY_CONSTANTS.SCRIPT_VERSION}
// Date: ${dateStamp}
// Product: ${productName}
// Markets: ${markets.join(', ')}

/*
 * SAFETY CHECKLIST - COMPLETE BEFORE EXECUTION:
 * 1. VERIFY all landing pages are live
 * 2. CHECK budget is acceptable
 * 3. REVIEW geo targeting
 * 4. TEST in preview mode first
 */

// Script variables
var DATE_STAMP = '${dateStamp}';
var PRODUCT_NAME = '${productName}';
var MARKETS = [${markets.map(m => `'${m}'`).join(', ')}];

// Safety Constants
var SAFETY_CONFIG = {
  MAX_DAILY_BUDGET_AUD: ${SAFETY_CONSTANTS.MAX_DAILY_BUDGET_AUD},
  DEFAULT_CAMPAIGN_STATUS: '${SAFETY_CONSTANTS.DEFAULT_CAMPAIGN_STATUS}',
  DEVICE_TARGETING: 'desktop: 1.0, mobile: -1.0, tablet: -0.3',
  ALLOW_HIGH_BUDGET: false
};

${urlHealthSection}

function main() {
  try {
    Logger.log('Starting campaign creation for ' + PRODUCT_NAME);

    // Budget safety check
    var budgetLimit = SAFETY_CONFIG.MAX_DAILY_BUDGET_AUD;
    if (!SAFETY_CONFIG.ALLOW_HIGH_BUDGET && budgetLimit > ${SAFETY_CONSTANTS.MAX_DAILY_BUDGET_AUD}) {
      throw new Error('Budget safety check failed. Budget exceeds limit.');
    }

    // Create campaigns
    createCampaigns();

    // Log execution summary
    Logger.log('=============================================');
    Logger.log('EXECUTION SUMMARY');
    Logger.log('Total campaigns: ${clusters.length * markets.length}');
    Logger.log('Total ad groups: ${clusters.length * markets.length}');
    Logger.log('Total keywords: ${clusters.reduce((sum, c) => sum + (c.primaryKeywords?.length || 0) + (c.keywords?.length || 0), 0) * markets.length}');
    Logger.log('=============================================');

  } catch (error) {
    Logger.log('ERROR: ' + error.toString());
    throw error;
  }
}

function createCampaigns() {
  ${campaignsCode}
}

main();`;
  }

  private generateUrlHealthSection(urlHealthResults: UrlHealthResult[]): string {
    let section = '// URL Health Check Results\n';
    section += '/*\n';

    const failedUrls: string[] = [];
    for (const result of urlHealthResults) {
      if (result.status === 'pass') {
        section += ` * ${result.url}: PASS\n`;
      } else {
        section += ` * ${result.url}: FAIL\n`;
        if (result.errors && result.errors.length > 0) {
          for (const error of result.errors) {
            section += ` *   - ${error}\n`;
            failedUrls.push(error);
          }
        }
      }
    }

    if (failedUrls.length > 0) {
      section += ' *\n';
      section += ' * ⚠️ WARNING: Failed URLs detected. Do not proceed without fixing:\n';
      failedUrls.forEach(error => {
        section += ` * - ${error}\n`;
      });
    }

    section += ' */\n';
    return section;
  }

  private generateCampaignsCode(
    clusters: KeywordCluster[],
    productConfig: any,
    options: AdsScriptOptions
  ): string {
    if (!clusters || clusters.length === 0) {
      return `  // No clusters provided
  Logger.log("No campaigns to create");`;
    }

    let code = '';

    for (const market of options.markets) {
      for (const cluster of clusters) {
        const campaignName = `LBA_${options.productName}_${cluster.name}_${market}`;
        code += `
  // Campaign: ${campaignName}
  Logger.log('Creating campaign: ${campaignName}');

  var campaign = AdsApp.newCampaignBuilder()
    .withName('${campaignName}')
    .withStatus('${SAFETY_CONSTANTS.DEFAULT_CAMPAIGN_STATUS}')
    .withBudget(${SAFETY_CONSTANTS.MAX_DAILY_BUDGET_AUD})
    .build()
    .getResult();

  Logger.log('Campaign created: ' + campaign.getName());

  // Create ad group
  var adGroup = campaign.newAdGroupBuilder()
    .withName('${cluster.name}')
    .build()
    .getResult();

  Logger.log('Ad group created: ' + adGroup.getName());

  // Add keywords
  var keywordsAdded = 0;`;

        // Add primary keywords
        if (cluster.primaryKeywords && cluster.primaryKeywords.length > 0) {
          for (const kw of cluster.primaryKeywords) {
            code += `
  adGroup.newKeywordBuilder()
    .withText('[${kw.keyword}]')
    .build();
  keywordsAdded++;`;
          }
        }

        // Add other keywords
        if (cluster.keywords && cluster.keywords.length > 0) {
          for (const kw of cluster.keywords) {
            code += `
  adGroup.newKeywordBuilder()
    .withText('"${kw.keyword}"')
    .build();
  keywordsAdded++;`;
          }
        }

        code += `

  Logger.log('Keywords added: ' + keywordsAdded);
`;
      }
    }

    return code;
  }
}